# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02-collation.ipynb (unless otherwise specified).

__all__ = ['collate_cleaned_incidents_info', 'PostCodeLocator']

# Cell
def collate_cleaned_incidents_info(dnos=['ukpn', 'ssen', 'wpd']):
    cleaned_incidents_info = dict()

    for dno in track(dnos, label='DNOs'):
        raw_dno_incidents_info, cleaned_dno_incidents_info = getattr(retrieval, f'get_{dno}_incidents_info')()
        cleaned_incidents_info[dno] = cleaned_dno_incidents_info
        retrieval.save_json_data(raw_dno_incidents_info, f'{dno}_incidents_info')

    return cleaned_incidents_info

# Cell
class PostCodeLocator:
    def __init__(self, postcodes_fp: str='../data/postcodes.csv'):
        # Loading Post Codes DataFrame
        df_postcodes = pd.read_csv(postcodes_fp, index_col='postcode')
        df_postcodes.index = df_postcodes.index.str.replace(' ', '')

        self.df_postcodes = df_postcodes

    def get_postcode_location(self, postcode):
        postcode_is_in_df = check_postcode_is_in_df(postcode, self.df_postcodes)

        if postcode_is_in_df:
            longitude, latitude = get_postcode_location_df(self.df_postcodes, postcode)

        else:
            longitude, latitude = get_postcode_location_api(postcode)

        if longitude is None or latitude is None:
            warn(f'The longitude and latitude of {postcode} could not be determined')

        return longitude, latitude